{"version":3,"file":"r2.lib.js","sourceRoot":"/","sources":["libs/r2.lib.ts"],"names":[],"mappings":";;;AAiBA,8CAgBC;AAGD,sDAYC;AAhDD,kDAA2E;AAC3E,wEAA6D;AAC7D,kDAA8C;AAE9C,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAE3B,eAAe;AACF,QAAA,EAAE,GAAG,IAAI,oBAAQ,CAAC;IAC7B,MAAM,EAAE,MAAM;IACd,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACzC,WAAW,EAAE;QACX,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,wBAAwB;QACjD,eAAe,EAAE,OAAO,CAAC,GAAG,CAAC,4BAA4B;KAC1D;CACF,CAAC,CAAC;AAGI,KAAK,UAAU,iBAAiB,CAAC,MAAc,EAAE,IAAY;IAElE,MAAM,SAAS,GAAG,MAAM,IAAA,mCAAY,EAClC,UAAE,EACF,IAAI,4BAAgB,CAAC;QACnB,MAAM,EAAE,YAAY;QACpB,GAAG,EAAE,MAAM;QACX,WAAW,EAAE,IAAI,EAAE,aAAa;QAChC,QAAQ,EAAE;YACR,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,YAAY,EAAE;SAChC;QACD,YAAY,EAAE,sCAAsC;KACrD,CAAC,EACF,EAAE,SAAS,EAAE,GAAG,EAAE,CACnB,CAAA;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,mCAAmC;AAC5B,KAAK,UAAU,qBAAqB,CAAC,MAAc;IACxD,MAAM,OAAO,GAAG,IAAI,+BAAmB,CAAC;QACtC,MAAM,EAAE,YAAY;QACpB,GAAG,EAAE,MAAM;KACZ,CAAC,CAAC;IAEH,IAAI,CAAC;QACH,MAAM,UAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,uCAAuC;QAC/D,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAC5C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;AACH,CAAC","sourcesContent":["import { DeleteObjectCommand, PutObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\n\r\nrequire('dotenv').config();\r\n\r\n//Configurar R2\r\nexport const r2 = new S3Client({\r\n  region: 'auto',\r\n  endpoint: process.env.CLOUDFLARE_ENDPOINT,\r\n  credentials: {\r\n    accessKeyId: process.env.CLOUDFLARE_ACCESS_KEY_ID,\r\n    secretAccessKey: process.env.CLOUDFLARE_SECRET_ACCESS_KEY,\r\n  }\r\n});\r\n\r\n\r\nexport async function getSignedUrlImage(urlKey: string, type: string) {\r\n\r\n  const signedUrl = await getSignedUrl(\r\n    r2,\r\n    new PutObjectCommand({\r\n      Bucket: 'ploudstore',\r\n      Key: urlKey,\r\n      ContentType: type, //'image/png'\r\n      Metadata: {\r\n        Etag: new Date().toTimeString(),\r\n      },\r\n      CacheControl: 'no-cache, max-age=0, must-revalidate',\r\n    }),\r\n    { expiresIn: 600 }\r\n  )\r\n  return signedUrl;\r\n}\r\n\r\n// Função para deletar imagem do R2\r\nexport async function deleteImageFromBucket(urlKey: string) {\r\n  const command = new DeleteObjectCommand({\r\n    Bucket: 'ploudstore',\r\n    Key: urlKey,\r\n  });\r\n\r\n  try {\r\n    await r2.send(command); // Usando a instância 'r2' corretamente\r\n    console.log('Image deleted successfully');\r\n  } catch (error) {\r\n    console.error('Error deleting image:', error);\r\n  }\r\n}"]}