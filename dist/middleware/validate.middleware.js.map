{"version":3,"file":"validate.middleware.js","sourceRoot":"/","sources":["middleware/validate.middleware.ts"],"names":[],"mappings":";;;AAEA,6BAAmC;AACnC,iEAAqE;AAE9D,MAAM,YAAY,GAAG,CAAC,MAAiB,EAAE,EAAE;IAChD,OAAO,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAC/D,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,OAAC,CAAC,QAAQ,EAAE,CAAC;gBAChC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;gBACnC,OAAO,IAAI,CAAC,IAAI,kCAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;YAChD,CAAC;YAED,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,YAAY,gBAevB;AAGK,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,OAAO,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAC/D,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;gBACnC,MAAM,IAAI,kCAAmB,CAAC,aAAa,CAAC,CAAC;YACjD,CAAC;YACD,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAZW,QAAA,aAAa,iBAYxB","sourcesContent":["// validate.middleware.ts\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { z, ZodSchema } from 'zod';\r\nimport { BadRequestException } from '../commons/errors/custom.error';\r\n\r\nexport const validateBody = (schema: ZodSchema) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.parseAsync(req.body);\r\n      next();\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        const firstError = error.errors[0];\r\n        const message = firstError.message;\r\n        return next(new BadRequestException(message));\r\n      }\r\n\r\n      return next(error);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const validateParam = () => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const id = Number(req.params.id);\r\n      if (!Number.isInteger(id) || id <= 0) {\r\n          throw new BadRequestException(\"ID invÃ¡lido\");\r\n      }\r\n      next();\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n};\r\n"]}