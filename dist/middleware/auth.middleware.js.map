{"version":3,"file":"auth.middleware.js","sourceRoot":"/","sources":["middleware/auth.middleware.ts"],"names":[],"mappings":";;;;;AAOA,wCAmBC;AAxBD,gEAA+C;AAC/C,iEAAuE;AAGvE,6BAA6B;AACtB,KAAK,UAAU,cAAc,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IAClF,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,oCAAqB,CAAC,2BAA2B,CAAC,CAAA;QAC9D,CAAC;QACD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAsB,CAAC;QAClD,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAe,CAAC;QAExD,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YAClD,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC5B,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,oCAAqB,CAAC,iBAAiB,CAAC,CAAA;QACpD,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,oCAAqB,CAAC,4BAA4B,CAAC,CAAC,CAAC;IAChE,CAAC;AACH,CAAC;AAED,SAAS,sBAAsB,CAAC,GAAY;;IAC1C,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,MAAA,MAAA,GAAG,CAAC,OAAO,CAAC,aAAa,0CAAE,KAAK,CAAC,GAAG,CAAC,mCAAI,EAAE,CAAC;IAClE,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;AAC/C,CAAC","sourcesContent":["// middleware/auth.middleware.ts\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\nimport { UnauthorizedException } from '../commons/errors/custom.error';\r\n\r\n\r\n// Middleware de autenticação\r\nexport async function AuthMiddleware(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const token = extractTokenFromHeader(req);\r\n    console.log(token);\r\n    if (!token) {\r\n      throw new UnauthorizedException(\"Sessão de auth nao existe\")\r\n    }\r\n    const secret = process.env.JWT_SECRET_TOKEN_AUTH!;\r\n    const decoded = jwt.verify(token, secret) as JwtPayload;\r\n\r\n    if (typeof decoded === 'object' && decoded.userId) {\r\n      req.userId = decoded.userId;\r\n      return next();\r\n    } else {\r\n      throw new UnauthorizedException(\"Sessão inválida\")\r\n    }\r\n  } catch (err) {\r\n    next(new UnauthorizedException(\"Token inválido ou expirado\"));\r\n  }\r\n}\r\n\r\nfunction extractTokenFromHeader(req: Request): string | undefined {\r\n  const [type, token] = req.headers.authorization?.split(' ') ?? [];\r\n  return type === 'Bearer' ? token : undefined;\r\n}\r\n"]}