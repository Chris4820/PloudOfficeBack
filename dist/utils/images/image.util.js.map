{"version":3,"file":"image.util.js","sourceRoot":"/","sources":["utils/images/image.util.ts"],"names":[],"mappings":";;AAgBA,0CAYC;AAGD,4CAEC;AAGD,8CAGC;AAvCD,oEAAuE;AACvE,8CAAsD;AAEtD,MAAM,gBAAgB,GAAG;IACvB,YAAY;IACZ,WAAW;IACX,WAAW;IACX,WAAW;IACX,YAAY;IACZ,eAAe;IACf,WAAW;IACX,YAAY;CACb,CAAA;AAED,MAAM,OAAO,GAAG,2BAA2B,CAAC;AAErC,KAAK,UAAU,eAAe,CAAC,IAAY,EAAE,IAAY,EAAE,OAAe;IAC/E,IAAI,CAAC;QACH,IAAG,IAAI,GAAG,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,kCAAmB,CAAC,mCAAmC,GAAG,OAAO,GAAG,KAAK,CAAC,CAAC;QACvF,CAAC;QACD,IAAG,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACpC,MAAM,IAAI,kCAAmB,CAAC,8CAA8C,CAAC,CAAC;QAChF,CAAC;IAEH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,kCAAmB,CAAC,sCAAsC,CAAC,CAAC;IACxE,CAAC;AACH,CAAC;AAGM,KAAK,UAAU,gBAAgB,CAAC,OAAe,EAAE,EAAU;IAChE,OAAO,GAAG,OAAO,IAAI,OAAO,IAAI,EAAE,EAAE,CAAC;AACvC,CAAC;AAGM,KAAK,UAAU,iBAAiB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAiB;IACpF,MAAM,GAAG,GAAG,GAAG,OAAO,IAAI,EAAE,EAAE,CAAC;IAC/B,OAAO,MAAM,IAAA,0BAAiB,EAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import { BadRequestException } from \"../../commons/errors/custom.error\"\r\nimport { getSignedUrlImage } from \"../../libs/r2.lib\";\r\n\r\nconst allowsImageTypes = [\r\n  'image/jpeg',\r\n  'image/jpg',\r\n  'image/png',\r\n  'image/gif',\r\n  'image/webp',\r\n  'image/svg+xml',\r\n  'image/bmp',\r\n  'image/tiff'\r\n]\r\n\r\nconst CDN_URL = \"https://dns.ploudcode.com\";\r\n\r\nexport async function CheckPropsImage(size: number, type: string, maxSize: number) {\r\n  try {\r\n    if(size > maxSize) {\r\n      throw new BadRequestException(\"A imagem é muito grande! Máximo: \" + maxSize + \"MB.\");\r\n    }\r\n    if(!allowsImageTypes.includes(type)) {\r\n      throw new BadRequestException(\"Tipo de imagem não suportado, use outro tipo\");\r\n    }\r\n\r\n  } catch (error) {\r\n    throw new BadRequestException(\"Algo correu mal a verificar a imagem\");\r\n  }\r\n}\r\n\r\n\r\nexport async function generateImageUrl(storeId: number, id: number):  Promise<string>{\r\n  return `${CDN_URL}/${storeId}/${id}`;\r\n}\r\n\r\n\r\nexport async function generateSignedUrl(storeId: number, id: number, imageType: string) : Promise<string | undefined> {\r\n  const key = `${storeId}/${id}`;\r\n  return await getSignedUrlImage(key, imageType);\r\n}"]}