{"version":3,"file":"auth.service.js","sourceRoot":"/","sources":["modules/auth/auth.service.ts"],"names":[],"mappings":";;;;;AAIA,wCAcC;AAED,wCASC;AA7BD,+DAAuC;AAIhC,KAAK,UAAU,cAAc,CAAC,KAAa;IAChD,OAAO,MAAM,gBAAM,CAAC,YAAY,CAAC,UAAU,CAAC;QAC1C,KAAK,EAAE;YACL,KAAK;SACN;QACD,MAAM,EAAE;YACN,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI;YACX,SAAS,EAAE,IAAI;YACf,KAAK,EAAE,IAAI;SACZ;KACF,CAAC,CAAA;AACJ,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,MAAc,EAAE,WAAmB;IACtE,OAAO,MAAM,gBAAM,CAAC,YAAY,CAAC,MAAM,CAAC;QACtC,KAAK,EAAE;YACL,EAAE,EAAE,MAAM;SACX;QACD,IAAI,EAAE;YACJ,QAAQ,EAAE,WAAW;SACtB;KACF,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import prisma from \"../../libs/prisma\";\r\n\r\n\r\n\r\nexport async function getUserByEmail(email: string) {\r\n  return await prisma.collaborator.findUnique({\r\n    where: {\r\n      email,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      password: true,\r\n      email: true,\r\n      shortName: true,\r\n      theme: true,\r\n    }\r\n  })\r\n}\r\n\r\nexport async function updatePassword(userId: number, newPassword: string) {\r\n  return await prisma.collaborator.update({\r\n    where: {\r\n      id: userId,\r\n    },\r\n    data: {\r\n      password: newPassword,\r\n    }\r\n  })\r\n}"]}