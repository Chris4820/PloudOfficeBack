{"version":3,"file":"auth.controller.js","sourceRoot":"/","sources":["modules/auth/auth.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, type NextFunction } from \"express\";\r\nimport { getUserByEmail, updatePassword } from \"./auth.service\";\r\nimport { comparePassword, hashPassword } from \"../../utils/bcrypt\";\r\nimport { generateAuthJWT } from \"../../commons/jwt/auth.jwt\";\r\nimport type { LoginSchemaProps } from \"./schema/login.schema\";\r\nimport type { RegisterSchemaProps } from \"./schema/register.schema\";\r\nimport { createUser, isEmailExist } from \"../user/user.service\";\r\nimport { ConflictException } from \"../../commons/errors/custom.error\";\r\nimport type { CreateUserProps } from \"../user/types/user.type\";\r\nimport { generateShortName } from \"../../utils/utils\";\r\nimport type { forgotPasswordFormData } from \"./schema/forgotPassword.schema\";\r\nimport redis from \"../../libs/redis\";\r\nimport { generateToken } from \"../../utils/crypto\";\r\nimport { sendRecoveryPassword } from \"../../commons/email/email.service\";\r\nimport type { resetPasswordSchemaFormData } from \"./schema/resetPassword.schema\";\r\n\r\n\r\n\r\n\r\nexport async function LoginController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const data = req.body as LoginSchemaProps;\r\n\r\n    console.log(data);\r\n    const user = await getUserByEmail(data.email);\r\n    if (!user || !(await comparePassword(data.password, user.password))) {\r\n      return res.status(400).json({ message: 'Credenciais inválidas' })\r\n    }\r\n\r\n    //Validado\r\n    const token = await generateAuthJWT(user.id, data.remember ? '7d' : '2h');\r\n    const { password, ...userWithoutPassword } = user;\r\n    return res.status(200).json({\r\n      user: userWithoutPassword,\r\n      session: {\r\n        token,\r\n      }\r\n    })\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function RegisterController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const data = req.body as RegisterSchemaProps;\r\n    //Verificar se o email já está registrado\r\n    const user = await isEmailExist(data.email);\r\n    if (user) {\r\n      throw new ConflictException(\"Esse email já está registado\");\r\n    }\r\n    const currentUserData: CreateUserProps = {\r\n      name: data.name,\r\n      email: data.email,\r\n      password: await hashPassword(data.password),\r\n      shortName: await generateShortName(data.name),\r\n    }\r\n\r\n    await createUser(currentUserData)\r\n    return res.status(200).json({ message: 'Registado com sucesso!' });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function ForgotPasswordController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const data = req.body as forgotPasswordFormData;\r\n    const user = await getUserByEmail(data.email);\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'Utilizador não encontrado' });\r\n    }\r\n    const userToken = await redis.get(`forgot_password_${user.id}`);\r\n    if (userToken) {\r\n      //Já foi enviado um email anteirormente para este email\r\n      return res.status(400).json({ message: 'Um email de redefinição de senha já foi enviado para este email' });\r\n    } else {\r\n      //Envia o email\r\n      const token = await generateToken(6);\r\n      const baseUrl =\r\n        process.env.NODE_ENV === \"production\"\r\n          ? \"https://app.ploudstore.com/auth/reset-password\"\r\n          : \"http://localhost:5173/auth/reset-password\";\r\n      const verificationLink = `${baseUrl}/${token}`;\r\n\r\n      await Promise.all([\r\n        redis.set(`forgot_password_${user.id}`, token, \"EX\", 300),\r\n        redis.set(`forgot_password_token_${token}`, user.id, \"EX\", 300),\r\n        sendRecoveryPassword({\r\n          email: user.email,\r\n          verificationLink: verificationLink,\r\n          userName: user.name,\r\n        })\r\n      ]);\r\n\r\n      return res.status(200).json({ message: 'Ok' });\r\n\r\n\r\n    }\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function ResetPasswordController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const data = req.body as resetPasswordSchemaFormData;\r\n    const { token } = req.params;\r\n    if (!token) {\r\n      return res.status(400).json({ message: 'Token não fornecido' });\r\n    }\r\n    const userId = await redis.get(`forgot_password_token_${token}`);\r\n    if (!userId) {\r\n      return res.status(400).json({ message: 'Token inválido' });\r\n    }\r\n    const passwordHashed = await hashPassword(data.password);\r\n\r\n    await updatePassword(Number(userId), passwordHashed);\r\n\r\n    return res.status(200).json({ message: 'Senha redefinida com sucesso' });\r\n\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}"]}