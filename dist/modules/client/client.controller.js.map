{"version":3,"file":"client.controller.js","sourceRoot":"/","sources":["modules/client/client.controller.ts"],"names":[],"mappings":";;AAMA,kDAQC;AAgBD,0DA0BC;AAED,gEAcC;AAvED,qDAAqI;AACrI,oEAAsE;AAI/D,KAAK,UAAU,mBAAmB,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IACvF,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,KAAyB,CAAC;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAA,kCAAiB,EAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;GAaG;AACI,KAAK,UAAU,uBAAuB,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IAC3F,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,KAA0B,CAAC;QAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAE3C,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,KAA4B,CAAC;QAClD,IAAI,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,KAA6B,CAAC;QACpD,IAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,UAAU,EAAE,CAAC;YACjD,MAAM,GAAG,KAAK,CAAC;QACjB,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,QAAQ,EAAE,CAAC;YAChD,OAAO,GAAG,QAAQ,CAAC;QACrB,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACzC,IAAA,8BAAa,EAAC,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC;YACvD,IAAA,gCAAe,EAAC,GAAG,CAAC,OAAO,CAAC;SAC7B,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;IACxD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,0BAA0B,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IAC9F,IAAI,CAAC;QACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC1B,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC/C,IAAA,8BAAa,EAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC;YACtC,IAAA,gDAA+B,EAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC;SACzD,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,gCAAiB,CAAC,wBAAwB,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;IACxD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import type { NextFunction, Request, Response } from \"express\";\r\nimport { CountAllClients, findClientByEmail, GetAllClients, getClientAppoinmentsStatusCount, getClientById } from \"./client.service\";\r\nimport { NotFoundException } from \"../../commons/errors/custom.error\";\r\n\r\n\r\n\r\nexport async function GetClientController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const { name } = req.query as { name: string };\r\n    const client = await findClientByEmail(req.storeId, name);\r\n    return res.status(200).json(client);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Controller para obter clientes paginados com filtros de status e ordenação.\r\n * \r\n * Query parameters:\r\n * - page: número da página para paginação (default: 1)\r\n * - status: filtro do estado do cliente ('all' | 'active' | 'inactive') (default 'all')\r\n *      - 'active': clientes com marcações nos últimos 6 meses\r\n *      - 'inactive': clientes sem marcações nos últimos 6 meses\r\n *      - 'all': todos os clientes sem filtro de status\r\n * - orderBy: ordenação pela data de criação ('newest' | 'oldest') (default 'newest')\r\n * \r\n * Retorna uma resposta JSON com os clientes e meta informações (total).\r\n * \r\n */\r\nexport async function GetAllClientsController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const { page } = req.query as { page?: string };\r\n    const pageNumber = parseInt(page, 10) || 1;\r\n\r\n    let { status } = req.query as { status?: string };\r\n    let { orderBy } = req.query as { orderBy?: string };\r\n    if (status !== 'active' && status !== 'inactive') {\r\n      status = 'all';\r\n    }\r\n\r\n    console.log(status);\r\n    if (orderBy !== 'older' && orderBy !== 'newest') {\r\n      orderBy = 'newest';\r\n    }\r\n\r\n    console.log(orderBy);\r\n\r\n    const [clients, count] = await Promise.all([\r\n      GetAllClients(req.storeId, pageNumber, orderBy, status),\r\n      CountAllClients(req.storeId)\r\n    ]);\r\n    return res.status(200).json({ clients, meta: count });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function GetClientDetailsController(req: Request, res: Response, next: NextFunction) {\r\n  try {\r\n    const { id } = req.params;\r\n    const [client, appointments] = await Promise.all([\r\n      getClientById(Number(id), req.storeId),\r\n      getClientAppoinmentsStatusCount(Number(id), req.storeId)\r\n    ]);\r\n    if (!client) {\r\n      throw new NotFoundException(\"Cliente não encontrado\");\r\n    }\r\n    return res.status(200).json({ client, appointments });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n}"]}