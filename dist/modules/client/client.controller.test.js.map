{"version":3,"file":"client.controller.test.js","sourceRoot":"/","sources":["modules/client/client.controller.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { GetClientController, GetAllClientsController } from './client.controller';\r\nimport * as clientService from './client.service';\r\n\r\n// Mocks das funções do serviço\r\njest.mock('./client.service', () => ({\r\n  findClientByEmail: jest.fn(),\r\n  GetAllClients: jest.fn(),\r\n  CountAllClients: jest.fn(),\r\n}));\r\n\r\nconst mockedFindClientByEmail = clientService.findClientByEmail as jest.Mock;\r\nconst mockedGetAllClients = clientService.GetAllClients as jest.Mock;\r\nconst mockedCountAllClients = clientService.CountAllClients as jest.Mock;\r\n\r\n// Helpers para simular Request e Response\r\nconst mockResponse = () => {\r\n  const res: Partial<Response> = {};\r\n  res.status = jest.fn().mockReturnValue(res);\r\n  res.json = jest.fn().mockReturnValue(res);\r\n  return res as Response;\r\n};\r\n\r\nconst mockNext = jest.fn() as NextFunction;\r\n\r\ndescribe('Client Controller', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('GetClientController', () => {\r\n    it('deve retornar os clientes que correspondem ao nome', async () => {\r\n      const mockClients = [{ id: 1, name: 'João Silva', email: 'joao@example.com' }];\r\n      mockedFindClientByEmail.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { name: 'João' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetClientController(req as Request, res, mockNext);\r\n\r\n      expect(mockedFindClientByEmail).toHaveBeenCalledWith(1, 'João');\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('deve retornar todos os clientes quando o nome não é fornecido', async () => {\r\n      const mockClients = [{ id: 1, name: 'Maria', email: 'maria@example.com' }];\r\n      mockedFindClientByEmail.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: {},\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetClientController(req as Request, res, mockNext);\r\n\r\n      expect(mockedFindClientByEmail).toHaveBeenCalledWith(1, undefined);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('deve chamar o next com erro se o serviço falhar', async () => {\r\n      const error = new Error('Erro da base de dados');\r\n      mockedFindClientByEmail.mockRejectedValue(error);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { name: 'João' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetClientController(req as Request, res, mockNext);\r\n\r\n      expect(mockedFindClientByEmail).toHaveBeenCalledWith(1, 'João');\r\n      expect(mockNext).toHaveBeenCalledWith(error);\r\n    });\r\n  });\r\n\r\n  describe('GetAllClientsController', () => {\r\n    it('deve retornar clientes paginados com meta', async () => {\r\n      const mockClients = [{ id: 1, name: 'João Silva' }];\r\n      const mockMeta = { total: 1 };\r\n\r\n      mockedGetAllClients.mockResolvedValue(mockClients);\r\n      mockedCountAllClients.mockResolvedValue(mockMeta);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { page: '2', status: 'active', orderBy: 'older' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 2, 'older', 'active');\r\n      expect(mockedCountAllClients).toHaveBeenCalledWith(1);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith({ clients: mockClients, meta: mockMeta });\r\n    });\r\n\r\n    it('deve aplicar valores por defeito se parâmetros forem inválidos', async () => {\r\n      const mockClients = [{ id: 2 }];\r\n      const mockMeta = { total: 1 };\r\n\r\n      mockedGetAllClients.mockResolvedValue(mockClients);\r\n      mockedCountAllClients.mockResolvedValue(mockMeta);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { page: 'abc', status: 'qualquer', orderBy: 'xpto' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 1, 'newest', 'all');\r\n      expect(mockedCountAllClients).toHaveBeenCalledWith(1);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith({ clients: mockClients, meta: mockMeta });\r\n    });\r\n\r\n    it('deve chamar o next com erro se o serviço falhar', async () => {\r\n      const error = new Error('Erro no serviço');\r\n      mockedGetAllClients.mockRejectedValue(error);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { page: '1' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 1, 'newest', 'all');\r\n      expect(mockNext).toHaveBeenCalledWith(error);\r\n    });\r\n  });\r\n});\r\n"]}