{"version":3,"file":"client.controller.test.js","sourceRoot":"/","sources":["modules/client/client.controller.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2DAAmF;AACnF,gEAAkD;AAElD,6BAA6B;AAC7B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC;IACnC,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;IAC5B,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;CACzB,CAAC,CAAC,CAAC;AAEJ,MAAM,uBAAuB,GAAG,aAAa,CAAC,iBAA8B,CAAC;AAC7E,MAAM,mBAAmB,GAAG,aAAa,CAAC,aAA0B,CAAC;AAErE,4DAA4D;AAC5D,MAAM,YAAY,GAAG,GAAG,EAAE;IACxB,MAAM,GAAG,GAAsB,EAAE,CAAC;IAClC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAC5C,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAC1C,OAAO,GAAe,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAkB,CAAC;AAE3C,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,WAAW,GAAG;gBAClB,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,kBAAkB,EAAE,KAAK,EAAE,gBAAgB,EAAE;aAClF,CAAC;YACF,uBAAuB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEvD,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;aACxB,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,uCAAmB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAEzD,MAAM,CAAC,uBAAuB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAChE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,WAAW,GAAG;gBAClB,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,kBAAkB,EAAE,KAAK,EAAE,gBAAgB,EAAE;aAClF,CAAC;YACF,uBAAuB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEvD,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE;aACV,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,uCAAmB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAEzD,MAAM,CAAC,uBAAuB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YACnE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC1C,uBAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAEjD,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;aACxB,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,uCAAmB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAEzD,MAAM,CAAC,uBAAuB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAChE,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAC1C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,WAAW,GAAG;gBAClB;oBACE,EAAE,EAAE,CAAC;oBACL,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,kBAAkB;oBACzB,KAAK,EAAE,SAAS;oBAChB,KAAK,EAAE,WAAW;oBAClB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB;aACF,CAAC;YACF,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEnD,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;aACrB,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,2CAAuB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE7D,MAAM,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,WAAW,GAAG;gBAClB;oBACE,EAAE,EAAE,CAAC;oBACL,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,kBAAkB;oBACzB,KAAK,EAAE,SAAS;oBAChB,KAAK,EAAE,WAAW;oBAClB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB;aACF,CAAC;YACF,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEnD,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE;aACV,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,2CAAuB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE7D,MAAM,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,WAAW,GAAG,EAAE,CAAC;YACvB,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEnD,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;aAC3B,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,2CAAuB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE7D,MAAM,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC1C,mBAAmB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAE7C,MAAM,GAAG,GAAqB;gBAC5B,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;aACrB,CAAC;YACF,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;YAE3B,MAAM,IAAA,2CAAuB,EAAC,GAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE7D,MAAM,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAC1C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { GetClientController, GetAllClientsController } from './client.controller';\r\nimport * as clientService from './client.service';\r\n\r\n// Mock the service functions\r\njest.mock('./client.service', () => ({\r\n  findClientByEmail: jest.fn(),\r\n  GetAllClients: jest.fn(),\r\n}));\r\n\r\nconst mockedFindClientByEmail = clientService.findClientByEmail as jest.Mock;\r\nconst mockedGetAllClients = clientService.GetAllClients as jest.Mock;\r\n\r\n// Helper to create mock Request, Response, and NextFunction\r\nconst mockResponse = () => {\r\n  const res: Partial<Response> = {};\r\n  res.status = jest.fn().mockReturnValue(res);\r\n  res.json = jest.fn().mockReturnValue(res);\r\n  return res as Response;\r\n};\r\n\r\nconst mockNext = jest.fn() as NextFunction;\r\n\r\ndescribe('Client Controller', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('GetClientController', () => {\r\n    it('should return clients matching the name query', async () => {\r\n      const mockClients = [\r\n        { id: 1, name: 'João Silva', email: 'joao@example.com', notes: 'Regular client' },\r\n      ];\r\n      mockedFindClientByEmail.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { name: 'João' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetClientController(req as Request, res, mockNext);\r\n\r\n      expect(mockedFindClientByEmail).toHaveBeenCalledWith(1, 'João');\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should return all clients when no name is provided', async () => {\r\n      const mockClients = [\r\n        { id: 1, name: 'João Silva', email: 'joao@example.com', notes: 'Regular client' },\r\n      ];\r\n      mockedFindClientByEmail.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: {},\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetClientController(req as Request, res, mockNext);\r\n\r\n      expect(mockedFindClientByEmail).toHaveBeenCalledWith(1, undefined);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should call next with error if service fails', async () => {\r\n      const error = new Error('Database error');\r\n      mockedFindClientByEmail.mockRejectedValue(error);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { name: 'João' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetClientController(req as Request, res, mockNext);\r\n\r\n      expect(mockedFindClientByEmail).toHaveBeenCalledWith(1, 'João');\r\n      expect(mockNext).toHaveBeenCalledWith(error);\r\n      expect(res.status).not.toHaveBeenCalled();\r\n      expect(res.json).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('GetAllClientsController', () => {\r\n    it('should return paginated clients for a valid page', async () => {\r\n      const mockClients = [\r\n        {\r\n          id: 1,\r\n          name: 'João Silva',\r\n          email: 'joao@example.com',\r\n          notes: 'Regular',\r\n          phone: '912345678',\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      ];\r\n      mockedGetAllClients.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { page: '2' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 2);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should default to page 1 when no page is provided', async () => {\r\n      const mockClients = [\r\n        {\r\n          id: 1,\r\n          name: 'João Silva',\r\n          email: 'joao@example.com',\r\n          notes: 'Regular',\r\n          phone: '912345678',\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      ];\r\n      mockedGetAllClients.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: {},\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 1);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle invalid page numbers gracefully', async () => {\r\n      const mockClients = [];\r\n      mockedGetAllClients.mockResolvedValue(mockClients);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { page: 'invalid' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 1);\r\n      expect(res.status).toHaveBeenCalledWith(200);\r\n      expect(res.json).toHaveBeenCalledWith(mockClients);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should call next with error if service fails', async () => {\r\n      const error = new Error('Database error');\r\n      mockedGetAllClients.mockRejectedValue(error);\r\n\r\n      const req: Partial<Request> = {\r\n        storeId: 1,\r\n        query: { page: '1' },\r\n      };\r\n      const res = mockResponse();\r\n\r\n      await GetAllClientsController(req as Request, res, mockNext);\r\n\r\n      expect(mockedGetAllClients).toHaveBeenCalledWith(1, 1);\r\n      expect(mockNext).toHaveBeenCalledWith(error);\r\n      expect(res.status).not.toHaveBeenCalled();\r\n      expect(res.json).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});"]}