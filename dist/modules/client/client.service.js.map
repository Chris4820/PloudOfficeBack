{"version":3,"file":"client.service.js","sourceRoot":"/","sources":["modules/client/client.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { subMonths } from \"date-fns\";\r\nimport prisma from \"../../libs/prisma\";\r\n\r\n\r\n\r\n\r\nexport async function findClientByEmail(storeId: number, name?: string) {\r\n  return await prisma.client.findMany({\r\n    where: {\r\n      shopId: storeId,\r\n      ...(name && {\r\n        name: {\r\n          contains: name,\r\n          mode: 'insensitive',\r\n        },\r\n      }),\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      email: true,\r\n      notes: true,\r\n    },\r\n    take: 5,\r\n  });\r\n}\r\n\r\nexport async function upsertClient(shopId: number, name: string, email: string, notes: string, phone: string) {\r\n  return await prisma.client.upsert({\r\n    where: {\r\n      shopId_email: {\r\n        shopId,\r\n        email,\r\n      }\r\n    },\r\n    create: {\r\n      email,\r\n      name,\r\n      updatedAt: new Date(),\r\n      notes,\r\n      phone,\r\n      shopId,\r\n    },\r\n    update: {\r\n      email,\r\n      name,\r\n      updatedAt: new Date(),\r\n      notes,\r\n      phone,\r\n      shopId,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      email: true,\r\n    }\r\n  })\r\n}\r\n\r\nexport async function GetAllClients(shopId: number, page: number, orderBy: string, status: string) {\r\n  const sixMonthsAgo = subMonths(new Date(), 6);\r\n  return await prisma.client.findMany({\r\n    where: {\r\n      shopId,\r\n      lastAppointment: status === \"active\"\r\n        ? {\r\n          gte: sixMonthsAgo,\r\n        }\r\n        : status === \"inactive\"\r\n          ? {\r\n            lt: sixMonthsAgo,\r\n          }\r\n          : undefined,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      email: true,\r\n      lastAppointment: true,\r\n      _count: {\r\n        select: {\r\n          Appointment: true,\r\n        }\r\n      },\r\n    },\r\n    orderBy: {\r\n      lastAppointment: orderBy === 'newest' ? 'desc' : 'asc',\r\n    },\r\n    skip: (page - 1) * 10,\r\n    take: 10,\r\n  })\r\n}\r\n\r\nexport async function CountAllClients(shopId: number) {\r\n  return await prisma.client.count({\r\n    where: {\r\n      shopId,\r\n    },\r\n  })\r\n}\r\n\r\nexport async function UpdateLastVisit(clientId: number, shopId: number, newDate: Date) {\r\n  return await prisma.client.update({\r\n    where: {\r\n      id: clientId,\r\n      shopId,\r\n    },\r\n    data: {\r\n      lastAppointment: newDate,\r\n    }\r\n  })\r\n}\r\n\r\nexport async function getClientById(clientId: number, shopId: number) {\r\n  return await prisma.client.findUnique({\r\n    where: {\r\n      shopId,\r\n      id: clientId,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      email: true,\r\n      notes: true,\r\n      phone: true,\r\n      createdAt: true,\r\n      lastAppointment: true,\r\n      _count: {\r\n        select: {\r\n          Appointment: true,\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport async function getClientAppoinmentsStatusCount(clientId: number, shopId: number) {\r\n  return await prisma.appointment.groupBy({\r\n    by: ['status'],\r\n    where: {\r\n      shopId,\r\n      clientId,\r\n    },\r\n    _count: {\r\n      status: true,\r\n    },\r\n  });\r\n}\r\n\r\n"]}