{"version":3,"file":"statistic.service.js","sourceRoot":"/","sources":["modules/statistic/statistic.service.ts"],"names":[],"mappings":";;;;;AASA,8CAoCC;AAED,wCA2CC;AAGD,0CA4CC;AAzID,+DAAuC;AAShC,KAAK,UAAU,iBAAiB,CAAC,OAAe,EAAE,KAAyB;IAChF,MAAM,cAAc,GAAQ;QAC1B,MAAM,EAAE,OAAO;KAChB,CAAA;IAED,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,MAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAA,EAAE,CAAC;QAC/B,cAAc,CAAC,SAAS,GAAG;YACzB,GAAG,EAAE,KAAK,CAAC,KAAK;YAChB,GAAG,EAAE,KAAK,CAAC,GAAG;SACf,CAAA;IACH,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACxB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAEtB,MAAM,YAAY,GAAG,MAAM,gBAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;QACrD,KAAK,EAAE,cAAc;QACrB,MAAM,EAAE;YACN,KAAK,EAAE,IAAI;SACZ;KACF,CAAC,CAAA;IAEF,MAAM,eAAe,GAAG,MAAM,gBAAM,CAAC,MAAM,CAAC,KAAK,CAAC;QAChD,KAAK,EAAE,cAAc;KACtB,CAAC,CAAA;IAEF,MAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAA;IAC7C,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAEnF,OAAO;QACL,iBAAiB;QACjB,YAAY;QACZ,UAAU,EAAE,iBAAiB,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9E,eAAe;KAEhB,CAAA;AACH,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,MAAc,EAAE,KAAyB;IAE5E,MAAM,cAAc,GAAQ;QAC1B,MAAM,EAAE,MAAM;KACf,CAAA;IAED,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,MAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAA,EAAE,CAAC;QAC/B,cAAc,CAAC,SAAS,GAAG;YACzB,GAAG,EAAE,KAAK,CAAC,KAAK;YAChB,GAAG,EAAE,KAAK,CAAC,GAAG;SACf,CAAA;IACH,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,WAAW,CAAC,OAAO,CAAC;QACnD,EAAE,EAAE,CAAC,WAAW,CAAC;QACjB,KAAK,EAAE,cAAc;QACrB,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;QAC3B,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;QACrB,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE;QAC1C,IAAI,EAAE,CAAC;KACR,CAAC,CAAC;IAEH,uCAAuC;IACvC,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACrD,MAAM,QAAQ,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC7C,KAAK,EAAE;YACL,EAAE,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE;SACvB;QACD,MAAM,EAAE;YACN,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI;SACX;KACF,CAAC,CAAC;IAEH,eAAe;IACf,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;QAC5B,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC;QAC5D,OAAO;YACL,OAAO;YACP,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS;YAC1B,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC;SACjC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAGM,KAAK,UAAU,eAAe,CAAC,MAAc,EAAE,KAAyB;IAC7E,MAAM,cAAc,GAAQ;QAC1B,MAAM;KACP,CAAA;IAED,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,MAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAA,EAAE,CAAC;QAC/B,cAAc,CAAC,KAAK,GAAG;YACrB,GAAG,EAAE,KAAK,CAAC,KAAK;YAChB,GAAG,EAAE,KAAK,CAAC,GAAG;SACf,CAAA;IACH,CAAC;IAED,0BAA0B;IAC1B,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,WAAW,CAAC,OAAO,CAAC;QAC9C,EAAE,EAAE,CAAC,gBAAgB,CAAC;QACtB,KAAK,EAAE,cAAc;QACrB,MAAM,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE;QAChC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;QACrB,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,cAAc,EAAE,MAAM,EAAE,EAAE;QAC/C,IAAI,EAAE,CAAC;KAER,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAA;IAEzD,MAAM,aAAa,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/C,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE;QACtC,MAAM,EAAE;YACN,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI;SACX;KACF,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;;QAClC,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,cAAc,CAAC,CAAA;QACvE,OAAO;YACL,EAAE,EAAE,CAAC,CAAC,cAAc;YACpB,IAAI,EAAE,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,mCAAI,cAAc;YAC1C,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc;YAC9B,YAAY,EAAE,MAAA,CAAC,CAAC,IAAI,CAAC,KAAK,mCAAI,CAAC;SAChC,CAAA;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import prisma from \"../../libs/prisma\";\r\n\r\n\r\n\r\n//Return\r\ninterface GetStatStoreProps {\r\n  start: Date,\r\n  end: Date,\r\n}\r\nexport async function getStatisticStore(storeId: number, range?: GetStatStoreProps) {\r\n  const whereCondition: any = {\r\n    shopId: storeId,\r\n  }\r\n\r\n  if (range?.start && range?.end) {\r\n    whereCondition.createdAt = {\r\n      gte: range.start,\r\n      lte: range.end,\r\n    }\r\n  }\r\n\r\n  console.log(range.start)\r\n  console.log(range.end)\r\n\r\n  const appointments = await prisma.appointment.findMany({\r\n    where: whereCondition,\r\n    select: {\r\n      price: true,\r\n    },\r\n  })\r\n\r\n  const newClientsCount = await prisma.client.count({\r\n    where: whereCondition,\r\n  })\r\n\r\n  const totalAppointments = appointments.length\r\n  const totalRevenue = appointments.reduce((sum, appt) => sum + (appt.price || 0), 0)\r\n\r\n  return {\r\n    totalAppointments,\r\n    totalRevenue,\r\n    AvgRevenue: totalAppointments && (totalRevenue / totalAppointments).toFixed(2),\r\n    newClientsCount,\r\n\r\n  }\r\n}\r\n\r\nexport async function getTopServices(shopId: number, range?: GetStatStoreProps) {\r\n\r\n  const whereCondition: any = {\r\n    shopId: shopId,\r\n  }\r\n\r\n  if (range?.start && range?.end) {\r\n    whereCondition.createdAt = {\r\n      gte: range.start,\r\n      lte: range.end,\r\n    }\r\n  }\r\n\r\n  const topServices = await prisma.appointment.groupBy({\r\n    by: ['serviceId'],\r\n    where: whereCondition,\r\n    _count: { serviceId: true },\r\n    _sum: { price: true },\r\n    orderBy: { _count: { serviceId: 'desc' } },\r\n    take: 5,\r\n  });\r\n\r\n  // Opcional: buscar detalhes do serviÃ§o\r\n  const serviceIds = topServices.map(s => s.serviceId);\r\n  const services = await prisma.service.findMany({\r\n    where: {\r\n      id: { in: serviceIds }\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n    }\r\n  });\r\n\r\n  // Juntar dados\r\n  return topServices.map((ts) => {\r\n    const service = services.find((s) => s.id === ts.serviceId);\r\n    return {\r\n      service,\r\n      count: ts._count.serviceId,\r\n      totalRevenue: ts._sum.price || 0,\r\n    };\r\n  });\r\n}\r\n\r\n\r\nexport async function getTopEmployees(shopId: number, range?: GetStatStoreProps) {\r\n  const whereCondition: any = {\r\n    shopId,\r\n  }\r\n\r\n  if (range?.start && range?.end) {\r\n    whereCondition.start = {\r\n      gte: range.start,\r\n      lte: range.end,\r\n    }\r\n  }\r\n\r\n  // Agrupar por colaborador\r\n  const result = await prisma.appointment.groupBy({\r\n    by: ['collaboratorId'],\r\n    where: whereCondition,\r\n    _count: { collaboratorId: true },\r\n    _sum: { price: true },\r\n    orderBy: { _count: { collaboratorId: 'desc' } },\r\n    take: 5,\r\n\r\n  });\r\n\r\n  const collaboratorIds = result.map(r => r.collaboratorId)\r\n\r\n  const collaborators = await prisma.user.findMany({\r\n    where: { id: { in: collaboratorIds } },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n    },\r\n  });\r\n\r\n  const topEmployees = result.map(r => {\r\n    const collaborator = collaborators.find(c => c.id === r.collaboratorId)\r\n    return {\r\n      id: r.collaboratorId,\r\n      name: collaborator?.name ?? 'Desconhecido',\r\n      count: r._count.collaboratorId,\r\n      totalRevenue: r._sum.price ?? 0,\r\n    }\r\n  });\r\n\r\n  return topEmployees;\r\n}\r\n"]}