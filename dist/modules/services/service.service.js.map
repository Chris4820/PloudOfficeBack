{"version":3,"file":"service.service.js","sourceRoot":"/","sources":["modules/services/service.service.ts"],"names":[],"mappings":"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","sourcesContent":["import prisma from \"../../libs/prisma\";\r\nimport type { CreateServiceFormData } from \"./schema/create-service.schema\";\r\nimport type { EditServiceFormData } from \"./schema/update-service.schema\";\r\n\r\n\r\n\r\nexport async function getAllServices(storeId: number) {\r\n  return await prisma.service.findMany({\r\n    where: {\r\n      shopId: storeId,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      imageUrl: true,\r\n      isActive: true,\r\n      createdAt: true,\r\n    },\r\n    orderBy: {\r\n      order: 'asc'\r\n    }\r\n  })\r\n}\r\n\r\nexport async function getServiceById(shopId: number, serviceId: number) {\r\n  return await prisma.service.findUnique({\r\n    where: {\r\n      id: serviceId,\r\n      shopId,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      description: true,\r\n      imageUrl: true,\r\n      isActive: true,\r\n      color: true,\r\n      updatedAt: true,\r\n    }\r\n  })\r\n}\r\n\r\nexport async function CheckServiceIds(storeId: number, serviceIds: number[]) {\r\n  return await prisma.service.findMany({\r\n    where: {\r\n      shopId: storeId,\r\n      id: {\r\n        in: serviceIds,\r\n      },\r\n    },\r\n    select: {\r\n      id: true,\r\n    }\r\n  })\r\n}\r\n\r\nexport async function updateServiceOrder(serviceIds: number[]) {\r\n  try {\r\n    const cases = serviceIds.map((id, index) => `WHEN id = ${id} THEN ${index + 1}`).join(\" \");\r\n    const ids = serviceIds.join(\", \");\r\n\r\n    const query = `\r\n          UPDATE \"Service\"\r\n          SET \"order\" = CASE ${cases} END\r\n          WHERE id IN (${ids});\r\n      `;\r\n    await prisma.$executeRawUnsafe(query);\r\n    console.log(\"Atualizado!\");\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar a ordem das páginas:', error);\r\n    throw error; // Repassa o erro para ser tratado em outro lugar, se necessário\r\n  }\r\n}\r\n\r\nexport async function updateService(storeId: number, serviceId: number, data: EditServiceFormData) {\r\n  return await prisma.service.update({\r\n    where: {\r\n      id: serviceId,\r\n      shopId: storeId,\r\n    },\r\n    data: {\r\n      name: data.name,\r\n      description: data.description,\r\n      isActive: data.isActive,\r\n      color: data.color,\r\n    },\r\n    select: {\r\n      id: true,\r\n      imageUrl: true,\r\n    }\r\n  })\r\n}\r\n\r\nexport async function updateImageUrlService(storeId: number, serviceId: number, imageUrl: string | null) {\r\n  return await prisma.service.update({\r\n    where: {\r\n      id: serviceId,\r\n      shopId: storeId,\r\n    },\r\n    data: {\r\n      imageUrl,\r\n    }\r\n  })\r\n}\r\n\r\n\r\nexport async function CreateService(storeId: number, userId: number, data: CreateServiceFormData) {\r\n  return await prisma.service.create({\r\n    data: {\r\n      name: data.name,\r\n      description: data.description,\r\n      isActive: data.isActive,\r\n      shopId: storeId,\r\n      color: data.color,\r\n      CollaboratorService: {\r\n        create: {\r\n          price: data.price,\r\n          duration: data.duration,\r\n          notes: data.notes,\r\n          collaboratorId: userId,\r\n          isActive: data.isActive,\r\n        }\r\n      }\r\n    },\r\n    select: {\r\n      id: true,\r\n    }\r\n  })\r\n}\r\n\r\n\r\n//Retorna o serviço e props de um collab especifico\r\nexport async function GetServicesByCollaborator(storeId: number, collabUserId: number) {\r\n  return await prisma.collaborator.findFirst({\r\n    where: {\r\n      shopId: storeId,\r\n      userId: collabUserId,\r\n      isActive: true,\r\n    },\r\n    select: {\r\n      id: true,\r\n      CollaboratorService: {\r\n        where: {\r\n          isActive: true,\r\n        },\r\n        select: {\r\n          id: true,\r\n          price: true,\r\n          duration: true,\r\n          Service: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              description: true,\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n"]}