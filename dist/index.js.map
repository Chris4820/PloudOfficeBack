{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,gDAAuB;AACvB,qEAA6C;AAC7C,oEAAgE;AAChE,kEAA8D;AAC9D,qEAA6C;AAC7C,uEAA+C;AAC/C,oEAAgE;AAChE,2FAA4D;AAC5D,wDAAgC;AAChC,gDAAwB;AACxB,2DAAmC;AAEnC,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AACtB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEtC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAExB,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,GAAE,CAAC,CAAA;AAGf,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;AAChD,CAAC,CAAC,CAAA;AAEF,SAAS,4BAA4B;IACnC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEjD,kBAAQ,CAAC,SAAS,CAAC,OAAO,EAAE;QAC1B,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,GAAG;QACZ,OAAO,EAAE,IAAI;KACd,CAAC,CAAA;IACF,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAA;AAC/B,CAAC;AACD,4BAA4B,EAAE,CAAC;AAG/B,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACnC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,MAAM,gBAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;QACzC,GAAG,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAA;IACpC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAA;QAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAA;IAC3D,CAAC;AACH,CAAC,CAAC,CAAA;AAEF,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,oBAAU,CAAC,CAAC;AAC5B,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,+BAAc,CAAC,CAAC;AAChC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,gCAAc,EAAE,oBAAU,CAAC,CAAA;AAC3C,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,gCAAc,EAAE,kCAAe,EAAE,qBAAW,CAAC,CAAA;AAG7D,sDAAsD;AACtD,GAAG,CAAC,GAAG,CAAC,kCAAe,CAAC,CAAC;AAEzB,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,yCAAyC,IAAI,EAAE,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC","sourcesContent":["import express from 'express';\r\nimport cors from 'cors'\r\nimport authRouter from './routes/authRoutes';\r\nimport { errorMiddleware } from './middleware/error.middleware';\r\nimport { AuthMiddleware } from './middleware/auth.middleware';\r\nimport userRouter from './routes/userRoutes';\r\nimport storeRouter from './routes/storeRoutes';\r\nimport { StoreMiddleware } from './middleware/store.middleware';\r\nimport externalRouter from './routes/store-external.router';\r\nimport nunjucks from 'nunjucks';\r\nimport path from 'path';\r\nimport prisma from './libs/prisma';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\napp.use(express.json());\r\n\r\napp.use(cors())\r\n\r\n\r\napp.get('/', (req, res) => {\r\n  return res.status(200).json({ message: 'Ok' })\r\n})\r\n\r\nfunction ConfigureNjkLocalDevelopment() {\r\n  app.set('views', path.join(__dirname, '/views'));\r\n\r\n  nunjucks.configure('views', {\r\n    autoescape: true,\r\n    express: app,\r\n    noCache: true,\r\n  })\r\n  app.set('view engine', 'njk')\r\n}\r\nConfigureNjkLocalDevelopment();\r\n\r\n\r\napp.get('/teste', async (req, res) => {\r\n  try {\r\n    const count = await prisma.client.count()\r\n    res.json({ totalClientes: count })\r\n  } catch (error) {\r\n    console.error('Erro ao contar clientes:', error)\r\n    res.status(500).json({ erro: 'Erro ao contar clientes' })\r\n  }\r\n})\r\n\r\napp.use('/api', authRouter);\r\napp.use('/api', externalRouter);\r\napp.use('/api', AuthMiddleware, userRouter)\r\napp.use('/api', AuthMiddleware, StoreMiddleware, storeRouter)\r\n\r\n\r\n// middleware de erro deve estar sempre **por Ãºltimo**\r\napp.use(errorMiddleware);\r\n\r\napp.listen(port, () => {\r\n  console.log(`ðŸš€ Server running on http://localhost:${port}`);\r\n});\r\n"]}