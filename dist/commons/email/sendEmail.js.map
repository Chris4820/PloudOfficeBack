{"version":3,"file":"sendEmail.js","sourceRoot":"/","sources":["commons/email/sendEmail.ts"],"names":[],"mappings":";;AAWA,8BAgBC;AA3BD,qBAAqB;AACrB,8CAA2C;AAC3C,2DAA6D;AAStD,KAAK,UAAU,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAmB;IACjF,MAAM,IAAI,GAAG,MAAM,IAAA,oCAAmB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAE1D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,eAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QAC/C,IAAI,EAAE,sCAAsC;QAC5C,EAAE;QACF,OAAO;QACP,IAAI;KACL,CAAC,CAAC;IAEH,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC/C,MAAM,KAAK,CAAC;IACd,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["// utils/sendEmail.ts\r\nimport { resend } from \"../../libs/resend\";\r\nimport { renderEmailTemplate } from \"./utils/renderTemplate\";\r\n\r\ntype SendEmailParams = {\r\n  to: string;\r\n  subject: string;\r\n  template: string;\r\n  context: Record<string, any>;\r\n};\r\n\r\nexport async function sendEmail({ to, subject, template, context }: SendEmailParams) {\r\n  const html = await renderEmailTemplate(template, context);\r\n\r\n  const { data, error } = await resend.emails.send({\r\n    from: 'PloudStore <no-reply@ploudstore.com>',\r\n    to,\r\n    subject,\r\n    html,\r\n  });\r\n\r\n  if (error) {\r\n    console.error(\"Erro ao enviar e-mail:\", error);\r\n    throw error;\r\n  }\r\n\r\n  return data;\r\n}\r\n"]}